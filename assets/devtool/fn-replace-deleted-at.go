package fnDevtool

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

func addImport(filePath, importPath string) error {
	// อ่านเนื้อหาของไฟล์
	content, err := ioutil.ReadFile(filePath)
	if err != nil {
		return err
	}

	// เพิ่ม importPath ที่ถูกต้อง
	newContent := strings.ReplaceAll(string(content), "import (", "import (\n\t\""+importPath+"\"")

	// เขียนกลับไปทับเนื้อหาเดิม
	err = ioutil.WriteFile(filePath, []byte(newContent), 0644)
	if err != nil {
		return err
	}

	return nil
}

func addImportIfNotExist(content, importPath string) string {
	// ตรวจสอบว่า importPath มีอยู่ในไฟล์แล้วหรือไม่
	if !strings.Contains(content, "\""+importPath+"\"") {
		// หาตำแหน่งที่จะเพิ่ม importPath
		index := strings.LastIndex(content, "import (")

		// สร้างเนื้อหาใหม่โดยเพิ่ม importPath ที่ตำแหน่งที่เหมาะสม
		content = content[:index+len("import (")] + "\n\t\"" + importPath + "\"\n" + content[index+len("import ("):]
	}

	return content
}

func removeGeneratedComment(filePath string) error {
	// อ่านเนื้อหาของไฟล์
	content, err := ioutil.ReadFile(filePath)
	if err != nil {
		return err
	}

	// ใช้ Regular Expression ในการค้นหาและลบข้อความที่ต้องการ
	re := regexp.MustCompile(`\/\/ Code generated by gorm\.io\/gen\. DO NOT EDIT\.`)
	newContent := re.ReplaceAllString(string(content), "")

	// เขียนกลับไปทับเนื้อหาเดิม
	err = ioutil.WriteFile(filePath, []byte(newContent), 0644)
	if err != nil {
		return err
	}

	return nil
}

func removeEmptyLinesAbovePackage(filePath string) error {
	// อ่านเนื้อหาของไฟล์
	content, err := ioutil.ReadFile(filePath)
	if err != nil {
		return err
	}

	// แยกเนื้อหาตามบรรทัด
	lines := strings.Split(string(content), "\n")

	// หาบรรทัดที่ package อยู่
	var packageLineIndex int
	for i, line := range lines {
		if strings.HasPrefix(strings.TrimSpace(line), "package ") {
			packageLineIndex = i
			break
		}
	}

	// ลบบรรทัดว่างที่อยู่ข้างบน package
	var newLines []string
	for i, line := range lines {
		if i < packageLineIndex && strings.TrimSpace(line) == "" {
			continue
		}
		newLines = append(newLines, line)
	}

	// รวม slice เป็นเนื้อหาใหม่
	newContent := strings.Join(newLines, "\n")

	// เขียนกลับไปทับเนื้อหาเดิม
	err = ioutil.WriteFile(filePath, []byte(newContent), 0644)
	if err != nil {
		return err
	}

	return nil
}

func ReplaceDeletedAt(filePath string) error {

	errRemoveGeneratedComment := removeGeneratedComment(filePath)
	if errRemoveGeneratedComment != nil {
		return errRemoveGeneratedComment
	}

	errRemoveEmptyLinesAbovePackage := removeEmptyLinesAbovePackage(filePath)
	if errRemoveEmptyLinesAbovePackage != nil {
		return errRemoveEmptyLinesAbovePackage
	}

	// อ่านเนื้อหาของไฟล์
	content, err := ioutil.ReadFile(filePath)
	if err != nil {
		return err
	}

	// ใช้ Regular Expression ในการค้นหาและแทนที่ *time.Time เป็น gorm.DeletedAt เฉพาะในส่วนของ field ที่ชื่อ DeletedAt
	re := regexp.MustCompile(`(\bDeletedAt\b)\s*\*\s*time\.Time`)
	newContent := re.ReplaceAllString(string(content), "${1} gorm.DeletedAt")

	// ตรวจสอบว่ามีการใช้งาน `gorm.DeletedAt` ในไฟล์หรือไม่
	if strings.Contains(newContent, "gorm.DeletedAt") {
		// เพิ่ม import "gorm.io/gorm" ถ้ายังไม่มี
		newContent = addImportIfNotExist(newContent, "gorm.io/gorm")
	}

	// เขียนกลับไปทับเนื้อหาเดิม
	err = ioutil.WriteFile(filePath, []byte(newContent), 0644)
	if err != nil {
		return err
	}

	return nil
}

func ReplaceDeletedAtFilesInDirectory(root string) error {
	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && filepath.Ext(path) == ".go" {
			fmt.Printf("Processing file: %s\n", path)
			err := ReplaceDeletedAt(path)
			if err != nil {
				fmt.Printf("Error processing file %s: %s\n", path, err)
			}
		}
		return nil
	})

	if err != nil {
		fmt.Printf("Error walking directory: %s\n", err)
		return err
	}

	return nil
}
